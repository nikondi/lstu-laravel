services:

    # Backend контейнер
    backend:
        # Для установки нужных пакетов используем не чистый образ, а инструкции из конкретного файла Dockerfile
        build:
            context: .
            dockerfile: ./.docker/backend/Dockerfile
        extra_hosts:
            - "host.docker.internal:host-gateway"
        restart: unless-stopped
        tty: true
        working_dir: /var/www
        volumes:
            - .:/var/www # Монтируем локальную папку в контейнер как /var/www
            - ./.docker/backend/php.ini:/usr/local/etc/php/php.ini
        depends_on:
            - db
        networks:
            - network

    # Nginx контейнер для вебсервера
    nginx:
        container_name: lstu-nginx
        # Используем готовый образ для nginx контейнера
        image: nginx:alpine
        restart: unless-stopped
        tty: true
        volumes:
            - .:/var/www # Монтируем локальную папку в контейнер как /var/www
            - ./.docker/nginx/conf.d/:/etc/nginx/conf.d/ # Передаем в контейнер конфигурационные файлы nginx
        depends_on:
            - backend
        networks:
            - npm-network
            - network

    # MariaDB контейнер
    db:
        image: mariadb:10.5.21
        restart: unless-stopped
        tty: true
        ports:
            - "3306:3306"
        command: [ '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci','--default-authentication-plugin=mysql_native_password' ]
        environment:
            # Желаемые настройки для СУБД MySQL
            MYSQL_DATABASE: lstu
            MYSQL_ROOT_PASSWORD: 'root'
            MYSQL_USER: 'lstu'
            MYSQL_PASSWORD: 'lstu'
        volumes:
            - dbdata:/var/lib/mysql # Используем именованный том из блока volumes
            - ./.docker/mariadb/my.cnf:/etc/mysql/my.cnf # Передаем в контейнер конфигурационный файл
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping" ]
        networks:
            - network

    # Для сборки js
    node:
        container_name: lstu-node
        build:
            context: .
            dockerfile: ./.docker/nodejs/Dockerfile
        tty: true
        restart: unless-stopped
        working_dir: /var/www
        volumes:
            - .:/var/www # Монтируем локальную папку в контейнер как /var/www
        networks:
            - npm-network

networks:
    npm-network:
        external: true
    network:
        driver: bridge
# Тома
volumes:
    # Чтобы данные БД не пропадали после выключения создаем именованный том
    dbdata:
        driver: local
